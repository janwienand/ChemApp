trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  NEW_RELEASE_BASE_NAME: 'ChemCompoundDB'

stages:
  - stage: FortifyScan
    displayName: 'Fortify SAST + SCA Scan and Policy Check'
    jobs:
      - job: RunFortifyScan
        displayName: 'Create Release, Scan and Check Policy'
        container:
          image: fortifydocker/fortify-ci-tools:8.0.0-jdk-17

        variables:
          DYNAMIC_RELEASE_NAME: '$(NEW_RELEASE_BASE_NAME):build-$(Build.BuildId)'

        steps:
          - checkout: self

          - script: fcli fod session login -u $(FOD_USER) -p $(FOD_PASSWORD) -t $(FOD_TENANT) --url $(FOD_URL)
            displayName: '1. Login to Fortify on Demand'

          - script: |
              fcli fod release create $(DYNAMIC_RELEASE_NAME) --status Development --store=releaseId
              fcli fod sast-scan setup --release ::releaseId:: --assessment-type "Static Assessment" --entitlement-frequency Subscription --audit-preference Automated --oss --use-aviator
            displayName: '2. Create new FoD Release: $(DYNAMIC_RELEASE_NAME)'

          - script: scancentral package -bt mvn -oss -o package.zip
            workingDirectory: $(Build.SourcesDirectory)
            displayName: '3. Package application source code'

          - script: |
              fcli fod sast start --release ::releaseId:: --file package.zip --store=Id
              fcli fod sast wait-for ::Id:: --interval=30s
            workingDirectory: $(Build.SourcesDirectory)
            displayName: '4. Start SAST+ SCA Scan and wait for completion'

          - script: |
              echo "--- Listing All Issues ---"
              fcli fod issue list --release ::releaseId:: -o "table=severityString:Severity,category:Category,primaryLocation:Location" --style border
            displayName: '5. List All Discovered Issues'

          - script: |
              echo "--- Checking for Critical Vulnerabilities ---"
              CRITICAL_COUNT=$(fcli fod issue list --release ::releaseId:: -q "severityString=='Critical'" -o json | jq 'length')
              echo "Number of critical issues found: $CRITICAL_COUNT"
              if [ $CRITICAL_COUNT -gt 0 ]; then
                echo "##vso[task.logissue type=error]Found $CRITICAL_COUNT critical vulnerabilities. Failing the build."
                exit 1
              else
                echo "No critical vulnerabilities found. Build can proceed."
              fi
            displayName: '6. Fail build on Critical Issues'

          - script: fcli fod session logout
            displayName: '7. Logout from Fortify on Demand'
            condition: always()

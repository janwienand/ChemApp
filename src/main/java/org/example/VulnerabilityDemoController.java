package org.example;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.UrlResource;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.web.bind.annotation.*;
import javax.persistence.EntityManager;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletResponse;
import javax.sql.DataSource;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.ByteArrayInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;

@RestController
@RequestMapping("/vulnerabilities")
public class VulnerabilityShowcaseController {

    @Autowired
    private DataSource dataSource;

    @Autowired
    private EntityManager entityManager;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    // ## SQL Injection Demos ##

    // VULNERABILITY (Row 1: SQL Injection - JDBC)
    @GetMapping("/sqli-jdbc")
    public String sqlInjectionJdbc(@RequestParam String id) throws Exception {
        Statement statement = dataSource.getConnection().createStatement();
        // UNSAFE: Direct concatenation of user input.
        statement.executeQuery("SELECT * FROM users WHERE id = '" + id + "'");
        return "JDBC SQLi demo executed.";
    }

    // VULNERABILITY (Row 2: SQL Injection - JPA)
    @GetMapping("/sqli-jpa")
    public String sqlInjectionJpa(@RequestParam String name) {
        // UNSAFE: Direct concatenation in a JPQL query.
        entityManager.createQuery("SELECT u FROM User u WHERE u.name = '" + name + "'");
        return "JPA SQLi demo executed.";
    }

    // VULNERABILITY (Row 3: SQL Injection - Spring JDBC)
    @GetMapping("/sqli-spring-jdbc")
    public String sqlInjectionSpringJdbc(@RequestParam String name) {
        // UNSAFE: Direct concatenation with JdbcTemplate.
        jdbcTemplate.query("SELECT * FROM users WHERE name = '" + name + "'", (rs, rowNum) -> null);
        return "Spring JDBC SQLi demo executed.";
    }

    // ## Other Injection & Processing Demos ##

    // VULNERABILITY (Row 7: Insecure Deserialization - Jackson)
    @PostMapping("/insecure-deserialization")
    public String insecureDeserialization(@RequestBody String json) throws Exception {
        ObjectMapper objectMapper = new ObjectMapper();
        // UNSAFE: Default typing can be exploited with gadget chains.
        objectMapper.enableDefaultTyping();
        objectMapper.readValue(json, Object.class);
        return "Insecure Deserialization demo executed.";
    }

    // VULNERABILITY (Row 11/12: Insecure XML Processing - XXE)
    @PostMapping("/insecure-xml")
    public String insecureXml(@RequestBody String xml) throws Exception {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        // UNSAFE: Without disabling external entities, this is vulnerable to XXE attacks.
        factory.newDocumentBuilder().parse(new ByteArrayInputStream(xml.getBytes()));
        return "Insecure XML Processing demo executed.";
    }

    // ## Web and Security Misconfigurations ##

    // VULNERABILITY (Row 8/9: Insecure Cookie)
    @GetMapping("/insecure-cookie")
    public String insecureCookie(HttpServletResponse response) {
        // UNSAFE: Cookie is missing HttpOnly and Secure flags.
        Cookie cookie = new Cookie("sessionID", "12345");
        response.addCookie(cookie);
        return "Insecure Cookie demo executed.";
    }

    // VULNERABILITY (Row 18: Server-Side Request Forgery - SSRF)
    @GetMapping("/ssrf")
    public String serverSideRequestForgery(@RequestParam String url) throws Exception {
        // UNSAFE: User-controlled URL is accessed directly.
        UrlResource resource = new UrlResource(url);
        resource.getInputStream().close(); // Access the resource
        return "SSRF demo executed.";
    }

    // VULNERABILITY (Row 13: Hardcoded Password)
    @GetMapping("/hardcoded-password")
    public String hardcodedPassword() throws Exception {
        String dbUrl = "jdbc:h2:mem:testdb";
        // UNSAFE: Password is hardcoded directly in the source code.
        Connection conn = DriverManager.getConnection(dbUrl, "sa", "supersecretpassword");
        conn.close();
        return "Hardcoded Password demo executed.";
    }
}
package org.example;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.UrlResource;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.web.bind.annotation.*;
import javax.persistence.EntityManager;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletResponse;
import javax.sql.DataSource;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.ByteArrayInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;

@RestController
@RequestMapping("/vulnerabilities")
public class VulnerabilityShowcaseController {

    @Autowired
    private DataSource dataSource;

    @Autowired
    private EntityManager entityManager;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @GetMapping("/sqli-jdbc")
    public String sqlInjectionJdbc(@RequestParam String id) throws Exception {
        Statement statement = dataSource.getConnection().createStatement();
        statement.executeQuery("SELECT * FROM users WHERE id = '" + id + "'");
        return "JDBC SQLi demo executed.";
    }

    @PostMapping("/insecure-deserialization")
    public String insecureDeserialization(@RequestBody String json) throws Exception {
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.enableDefaultTyping();
        objectMapper.readValue(json, Object.class);
        return "Insecure Deserialization demo executed.";
    }

    @PostMapping("/insecure-xml")
    public String insecureXml(@RequestBody String xml) throws Exception {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.newDocumentBuilder().parse(new ByteArrayInputStream(xml.getBytes()));
        return "Insecure XML Processing demo executed.";
    }

    @GetMapping("/insecure-cookie")
    public String insecureCookie(HttpServletResponse response) {
        Cookie cookie = new Cookie("sessionID", "12345");
        response.addCookie(cookie);
        return "Insecure Cookie demo executed.";
    }

    @GetMapping("/ssrf")
    public String serverSideRequestForgery(@RequestParam String url) throws Exception {
        UrlResource resource = new UrlResource(url);
        resource.getInputStream().close();
        return "SSRF demo executed.";
    }

    @GetMapping("/hardcoded-password")
    public String hardcodedPassword() throws Exception {
        String dbUrl = "jdbc:h2:mem:testdb";
        Connection conn = DriverManager.getConnection(dbUrl, "sa", "supersecretpassword");
        conn.close();
        return "Hardcoded Password demo executed.";
    }
}